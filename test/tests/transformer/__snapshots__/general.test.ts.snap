// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Transformer -> General Tests TypeScript 3.6.5 1`] = `
{
  "circular/a.ts": {
    "dts": "import { B } from "./b";
export declare class A {
    name: string;
    constructor(name: string);
}
export declare const b: B;
",
    "js": "import { B } from "./b";
var A = /** @class */ (function () {
    function A(name) {
        this.name = name;
    }
    return A;
}());
export { A };
export var b = new B();
b.print(new A("This is a random name"));
",
  },
  "circular/b.ts": {
    "dts": "import { A } from "./a";
export declare class B {
    print(a: A): void;
}
",
    "js": "var B = /** @class */ (function () {
    function B() {
    }
    B.prototype.print = function (a) {
        console.log(a.name);
    };
    return B;
}());
export { B };
",
  },
  "core/index.ts": {
    "dts": "export { sum } from "../utils/index";
export { g } from "../secondary/hello";
export { sum as sum2 } from "../utils/sum";
export { NoRuntimecodeHere } from "../utils/types-only";
import "../circular/b";
",
    "js": "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
export { sum } from "../utils/index";
export { g } from "../secondary/hello";
export { sum as sum2 } from "../utils/sum";
import { subs } from "../utils/index";
import "../circular/b";
import { A } from "../circular/a";
import * as path from "https://external.url/path.js";
import * as b from "../circular/a";
import * as c from "../circular/a";
import { myNative } from "../utils/utils.native";
c.A;
b.A;
path.sep;
myNative();
sum.sum(2, 3);
var n = null;
subs(2, 3);
var a = new A("");
(function () {
    return __awaiter(this, void 0, void 0, function () {
        var Logger, logger;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, import("../dynamic/logger")];
                case 1: return [4 /*yield*/, (_a.sent()).Logger];
                case 2:
                    Logger = _a.sent();
                    logger = new Logger();
                    logger.log("hi");
                    return [2 /*return*/];
            }
        });
    });
})();
(function () {
    return __awaiter(this, void 0, void 0, function () {
        var Tester, testerConst, testerClass;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, import("../dynamic/tester")];
                case 1:
                    Tester = (_a.sent()).Tester;
                    return [4 /*yield*/, import("../dynamic/tester")];
                case 2:
                    testerConst = (_a.sent()).tester;
                    testerClass = new Tester();
                    testerClass.test(12);
                    testerConst.test("12");
                    return [2 /*return*/];
            }
        });
    });
})();
",
  },
  "dynamic/logger.ts": {
    "dts": "declare type Tester = import("./tester").Tester;
export declare class Logger {
    level: string;
    tester: Tester;
    log(x: string): void;
}
export {};
",
    "js": "var Logger = /** @class */ (function () {
    function Logger() {
        this.level = "hi";
    }
    Logger.prototype.log = function (x) {
        console.log(x);
    };
    return Logger;
}());
export { Logger };
",
  },
  "dynamic/tester.ts": {
    "dts": "export declare class Tester {
    test(x: number): void;
}
export declare const tester: {
    test: (x: string) => void;
};
",
    "js": "var Tester = /** @class */ (function () {
    function Tester() {
    }
    Tester.prototype.test = function (x) {
        console.log(x);
    };
    return Tester;
}());
export { Tester };
export var tester = {
    test: function (x) { return console.log(x); },
};
",
  },
  "secondary/hello.ts": {
    "dts": "export declare const g = "hello";
",
    "js": "export var g = "hello";
",
  },
  "utils/index.ts": {
    "dts": "export * from "./sum";
export * from "./subs";
export { NoRuntimecodeHere } from "./types-only";
",
    "js": "export * from "./sum";
export * from "./subs";
",
  },
  "utils/subs.ts": {
    "dts": "export declare function subs(a: number, b: number): number;
",
    "js": "import { sum } from "./sum";
export function subs(a, b) {
    return sum(a, -b);
}
",
  },
  "utils/sum.ts": {
    "dts": "export declare function sum(a: number, b: number): number;
",
    "js": "export function sum(a, b) {
    return a + b;
}
",
  },
  "utils/types-only.ts": {
    "dts": "export declare type NoRuntimecodeHere = "never gonna give you up!";
",
    "js": "throw new Error("Not supposed to be!");
",
  },
  "utils/utils.native.ts": {
    "dts": "export declare function myNative(): void;
",
    "js": "export function myNative() { }
",
  },
}
`;

exports[`Transformer -> General Tests TypeScript 4.7.4 1`] = `
{
  "circular/a.ts": {
    "dts": "import { B } from "./b";
export declare class A {
    name: string;
    constructor(name: string);
}
export declare const b: B;
",
    "js": "import { B } from "./b";
var A = /** @class */ (function () {
    function A(name) {
        this.name = name;
    }
    return A;
}());
export { A };
export var b = new B();
b.print(new A("This is a random name"));
",
  },
  "circular/b.ts": {
    "dts": "import { A } from "./a";
export declare class B {
    print(a: A): void;
}
",
    "js": "var B = /** @class */ (function () {
    function B() {
    }
    B.prototype.print = function (a) {
        console.log(a.name);
    };
    return B;
}());
export { B };
",
  },
  "core/index.ts": {
    "dts": "export { sum } from "../utils/index";
export { g } from "../secondary/hello";
export { sum as sum2 } from "../utils/sum";
export { NoRuntimecodeHere } from "../utils/types-only";
import "../circular/b";
",
    "js": "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
export { sum } from "../utils/index";
export { g } from "../secondary/hello";
export { sum as sum2 } from "../utils/sum";
import { subs } from "../utils/index";
import "../circular/b";
import { A } from "../circular/a";
import * as path from "https://external.url/path.js";
import * as b from "../circular/a";
import * as c from "../circular/a";
import { myNative } from "../utils/utils.native";
c.A;
b.A;
path.sep;
myNative();
sum.sum(2, 3);
var n = null;
subs(2, 3);
var a = new A("");
(function () {
    return __awaiter(this, void 0, void 0, function () {
        var Logger, logger;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, import("../dynamic/logger")];
                case 1: return [4 /*yield*/, (_a.sent()).Logger];
                case 2:
                    Logger = _a.sent();
                    logger = new Logger();
                    logger.log("hi");
                    return [2 /*return*/];
            }
        });
    });
})();
(function () {
    return __awaiter(this, void 0, void 0, function () {
        var Tester, testerConst, testerClass;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, import("../dynamic/tester")];
                case 1:
                    Tester = (_a.sent()).Tester;
                    return [4 /*yield*/, import("../dynamic/tester")];
                case 2:
                    testerConst = (_a.sent()).tester;
                    testerClass = new Tester();
                    testerClass.test(12);
                    testerConst.test("12");
                    return [2 /*return*/];
            }
        });
    });
})();
",
  },
  "dynamic/logger.ts": {
    "dts": "declare type Tester = import("./tester").Tester;
export declare class Logger {
    level: string;
    tester: Tester;
    log(x: string): void;
}
export {};
",
    "js": "var Logger = /** @class */ (function () {
    function Logger() {
        this.level = "hi";
    }
    Logger.prototype.log = function (x) {
        console.log(x);
    };
    return Logger;
}());
export { Logger };
",
  },
  "dynamic/tester.ts": {
    "dts": "export declare class Tester {
    test(x: number): void;
}
export declare const tester: {
    test: (x: string) => void;
};
",
    "js": "var Tester = /** @class */ (function () {
    function Tester() {
    }
    Tester.prototype.test = function (x) {
        console.log(x);
    };
    return Tester;
}());
export { Tester };
export var tester = {
    test: function (x) { return console.log(x); },
};
",
  },
  "secondary/hello.ts": {
    "dts": "export declare const g = "hello";
",
    "js": "export var g = "hello";
",
  },
  "utils/index.ts": {
    "dts": "export * from "./sum";
export * from "./subs";
export { NoRuntimecodeHere } from "./types-only";
",
    "js": "export * from "./sum";
export * from "./subs";
",
  },
  "utils/subs.ts": {
    "dts": "export declare function subs(a: number, b: number): number;
",
    "js": "import { sum } from "./sum";
export function subs(a, b) {
    return sum(a, -b);
}
",
  },
  "utils/sum.ts": {
    "dts": "export declare function sum(a: number, b: number): number;
",
    "js": "export function sum(a, b) {
    return a + b;
}
",
  },
  "utils/types-only.ts": {
    "dts": "export declare type NoRuntimecodeHere = "never gonna give you up!";
",
    "js": "throw new Error("Not supposed to be!");
export {};
",
  },
  "utils/utils.native.ts": {
    "dts": "export declare function myNative(): void;
",
    "js": "export function myNative() { }
",
  },
}
`;

exports[`Transformer -> General Tests TypeScript Latest 1`] = `
{
  "circular/a.ts": {
    "dts": "import { B } from "./b";
export declare class A {
    name: string;
    constructor(name: string);
}
export declare const b: B;
",
    "js": "import { B } from "./b";
var A = /** @class */ (function () {
    function A(name) {
        this.name = name;
    }
    return A;
}());
export { A };
export var b = new B();
b.print(new A("This is a random name"));
",
  },
  "circular/b.ts": {
    "dts": "import { A } from "./a";
export declare class B {
    print(a: A): void;
}
",
    "js": "var B = /** @class */ (function () {
    function B() {
    }
    B.prototype.print = function (a) {
        console.log(a.name);
    };
    return B;
}());
export { B };
",
  },
  "core/index.ts": {
    "dts": "export { sum } from "../utils/index";
export { g } from "../secondary/hello";
export { sum as sum2 } from "../utils/sum";
export { NoRuntimecodeHere } from "../utils/types-only";
import "../circular/b";
",
    "js": "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
export { sum } from "../utils/index";
export { g } from "../secondary/hello";
export { sum as sum2 } from "../utils/sum";
import { subs } from "../utils/index";
import "../circular/b";
import { A } from "../circular/a";
import * as path from "https://external.url/path.js";
import * as b from "../circular/a";
import * as c from "../circular/a";
import { myNative } from "../utils/utils.native";
c.A;
b.A;
path.sep;
myNative();
sum.sum(2, 3);
var n = null;
subs(2, 3);
var a = new A("");
(function () {
    return __awaiter(this, void 0, void 0, function () {
        var Logger, logger;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, import("../dynamic/logger")];
                case 1: return [4 /*yield*/, (_a.sent()).Logger];
                case 2:
                    Logger = _a.sent();
                    logger = new Logger();
                    logger.log("hi");
                    return [2 /*return*/];
            }
        });
    });
})();
(function () {
    return __awaiter(this, void 0, void 0, function () {
        var Tester, testerConst, testerClass;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, import("../dynamic/tester")];
                case 1:
                    Tester = (_a.sent()).Tester;
                    return [4 /*yield*/, import("../dynamic/tester")];
                case 2:
                    testerConst = (_a.sent()).tester;
                    testerClass = new Tester();
                    testerClass.test(12);
                    testerConst.test("12");
                    return [2 /*return*/];
            }
        });
    });
})();
",
  },
  "dynamic/logger.ts": {
    "dts": "type Tester = import("./tester").Tester;
export declare class Logger {
    level: string;
    tester: Tester;
    log(x: string): void;
}
export {};
",
    "js": "var Logger = /** @class */ (function () {
    function Logger() {
        this.level = "hi";
    }
    Logger.prototype.log = function (x) {
        console.log(x);
    };
    return Logger;
}());
export { Logger };
",
  },
  "dynamic/tester.ts": {
    "dts": "export declare class Tester {
    test(x: number): void;
}
export declare const tester: {
    test: (x: string) => void;
};
",
    "js": "var Tester = /** @class */ (function () {
    function Tester() {
    }
    Tester.prototype.test = function (x) {
        console.log(x);
    };
    return Tester;
}());
export { Tester };
export var tester = {
    test: function (x) { return console.log(x); },
};
",
  },
  "secondary/hello.ts": {
    "dts": "export declare const g = "hello";
",
    "js": "export var g = "hello";
",
  },
  "utils/index.ts": {
    "dts": "export * from "./sum";
export * from "./subs";
export { NoRuntimecodeHere } from "./types-only";
",
    "js": "export * from "./sum";
export * from "./subs";
",
  },
  "utils/subs.ts": {
    "dts": "export declare function subs(a: number, b: number): number;
",
    "js": "import { sum } from "./sum";
export function subs(a, b) {
    return sum(a, -b);
}
",
  },
  "utils/sum.ts": {
    "dts": "export declare function sum(a: number, b: number): number;
",
    "js": "export function sum(a, b) {
    return a + b;
}
",
  },
  "utils/types-only.ts": {
    "dts": "export type NoRuntimecodeHere = "never gonna give you up!";
",
    "js": "throw new Error("Not supposed to be!");
export {};
",
  },
  "utils/utils.native.ts": {
    "dts": "export declare function myNative(): void;
",
    "js": "export function myNative() { }
",
  },
}
`;
